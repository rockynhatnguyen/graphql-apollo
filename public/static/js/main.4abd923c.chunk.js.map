{"version":3,"sources":["logo-icon.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","slice","reverse","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4abd923c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-icon.b68ec028.png\";","import React from 'react';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst LaunchItem = ({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) => {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={launch_success ? 'text-success' : 'text-danger'}>{ mission_name }</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n                </div>\n                <div className=\"col-md-3 text-right m-auto\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-primary\">Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LaunchItem","import React from 'react'\n\nconst MissionKey = () => {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /><span className=\"mr-5\"> = Success</span>\n                <span className=\"px-3 mr-2 bg-danger\" /><span className=\"mr-5\"> = Fail</span>\n            </p>\n        </div>\n    )\n}\n\nexport default MissionKey\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number,\n            mission_name,\n            launch_date_local,\n            launch_success\n        }\n    }\n`;\n\nexport class Launches extends Component {\n    render() {\n        return (\n            <>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <MissionKey />\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({ loading, error, data }) => {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) console.log(error);\n\n                            return <>\n                                {\n                                    data.launches.slice(0).reverse().map(launch => (\n                                        <LaunchItem key={launch.flight_number} launch={launch} />\n                                    ))\n                                }\n                            </>\n                        }\n                    }\n                </Query>\n            </>\n        )\n    }\n}\n\nexport default Launches\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n    render() {\n        let { flight_number } = this.props.match.params;\n        flight_number = parseInt(flight_number);\n        return (\n            <>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({ loading, error, data }) => {\n                            if(loading) return <h4>Loading...</h4>;\n                            if(error) console.log(error);\n\n                            const { mission_name, flight_number, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type }} = data.launch;\n    \n                            return <div>\n                                <h1 className=\"display-4 my-3\">Mission: {mission_name}</h1>\n                                <h4 className=\"mb-3\">Launch Details</h4>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                                    <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                                    <li className=\"list-group-item\">Launch Success: <span className={launch_success ? 'text-success' : 'text-danger'}>{launch_success ? 'Yes' : 'No'}</span></li>\n                                </ul>\n\n                                <h4 className=\"my-3\">Rocket Details</h4>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                </ul>\n                                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                            </div>\n                        }\n                    }\n                </Query>\n            </>\n        );\n    }\n}\n\nexport default Launch\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport './bootstrap.min.css';\nimport logo from './logo-icon.png';\n\n// Developer Environment\n// const client = new ApolloClient({\n//   uri: 'http://localhost:5000/graphql'\n// })\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App container\">\n          <img src={logo} alt=\"SpaceX icon logo.\" style={{width: 200, display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}